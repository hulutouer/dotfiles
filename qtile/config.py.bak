# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from libqtile import bar, layout, qtile, widget, hook
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
import subprocess

mod = "mod4"
terminal = guess_terminal()


@hook.subscribe.startup_once
def autostart():
    subprocess.Popen(["/home/sam/.config/polybar/launch_polybar.sh"])
    subprocess.Popen(["numlockx", "on"])
    subprocess.Popen(["picom"])
    subprocess.Popen(["feh", "--bg-fill", "--randomize", "/home/sam/Pictures/*"])


# 变量来存储当前和上一次的工作组
last_group = [None]
current_group = [None]


@hook.subscribe.setgroup
def update_last_group():
    global last_group, current_group
    current = qtile.current_group.name
    if current_group[0] != current:
        last_group[0] = current_group[0]
        current_group[0] = current


def switch_to_last_group(qtile):
    global last_group, current_group
    if last_group[0]:
        qtile.groups_map[last_group[0]].toscreen()
        current_group[0], last_group[0] = last_group[0], current_group[0]


keys = [
    # A list of available commands that can be bound to keys can be found
    # 可绑定到键的可用命令列表可以在以下地址找到
    # at https://docs.qtile.org/en/latest/manual/config/lazy.html
    # Switch between windows
    # 在窗口之间切换
    # Key([mod], "h", lazy.layout.left(), desc="Move focus to left"),  # 将焦点移动到左边
    # Key([mod], "l", lazy.layout.right(), desc="Move focus to right"),  # 将焦点移动到右边
    # Key([mod], "j", lazy.layout.down(), desc="Move focus down"),  # 将焦点移动到下方
    # Key([mod], "k", lazy.layout.up(), desc="Move focus up"),  # 将焦点移动到上方
    Key([mod], "j", lazy.layout.left(), desc="Move focus to left"),  # 将焦点移动到左边(diy)
    Key([mod], "k", lazy.layout.right(), desc="Move focus to right"),  # 将焦点移动到右边(diy)
    Key([mod], "space", lazy.layout.next(), desc="Move window focus to other window"),  # 将窗口焦点移动到下一个窗口
    # Move windows between left/right columns or move up/down in current stack.
    # Moving out of range in Columns layout will create new column.
    # 在左/右列之间移动窗口，或者在当前堆栈中向上/向下移动。
    # 在 Columns 布局中超出范围移动将创建新列。
    # Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window to the left"),  # 将窗口移动到左边
    # Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window to the right"),  # 将窗口移动到右边
    # Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),  # 将窗口移动到下方
    # Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),  # 将窗口移动到上方
    Key([mod, "shift"], "j", lazy.layout.shuffle_left(), desc="Move window to the left"),  # 将窗口移动到左边(diy)
    Key([mod, "shift"], "k", lazy.layout.shuffle_right(), desc="Move window to the right"),  # 将窗口移动到右边(diy)

    # Grow windows. If current window is on the edge of creen and direction
    # will be to screen edge - window would shrink.
    # 调整窗口大小。如果当前窗口在屏幕边缘并且方向朝向屏幕边缘，窗口将缩小。
    # Key([mod, "control"], "h", lazy.layout.grow_left(), desc="Grow window to the left"),  # 向左增加窗口大小
    # Key([mod, "control"], "l", lazy.layout.grow_right(), desc="Grow window to the right"),  # 向右增加窗口大小
    # Key([mod, "control"], "j", lazy.layout.grow_down(), desc="Grow window down"),  # 向下增加窗口大小
    # Key([mod, "control"], "k", lazy.layout.grow_up(), desc="Grow window up"),  # 向上增加窗口大小
    Key([mod], "h", lazy.layout.grow_left(), desc="Grow window to the left"),  # 向左增加窗口大小
    Key([mod], "l", lazy.layout.grow_right(), desc="Grow window to the right"),  # 向右增加窗口大小
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),  # 重置所有窗口大小

    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # 在堆栈的分割和未分割两侧之间切换。
    # Split = 显示所有窗口
    # Unsplit = 显示1个窗口，类似于 Max 布局，但仍然有多个堆栈窗格
    # multiple stack panes
    Key([mod, "shift"], "Return", lazy.layout.toggle_split(),
        desc="Toggle between split and unsplit sides of stack", ),  # 在堆栈的分割和未分割两侧之间切换
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),  # 启动终端
    # 在定义的不同布局之间切换
    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle between layouts"),  # 在布局之间切换
    Key([mod, "shift"], "c", lazy.window.kill(), desc="Kill focused window"),  # 关闭焦点窗口
    Key([mod], "m", lazy.window.toggle_fullscreen(),
        desc="Toggle fullscreen on the focused window", ),  # 切换焦点窗口的全屏状态
    Key([mod], "t", lazy.window.toggle_floating(), desc="Toggle floating on the focused window"),  # 切换焦点窗口的浮动状态
    # Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "shift"], "q", lazy.shutdown(), desc="Shutdown Qtile"),  # 关闭 Qtile
    # Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),  # 使用提示小部件运行命令
    Key([mod], "r", lazy.spawn("rofi -show drun"), desc="启动 Rofi"),  # 启动rofi(diy)
    Key([mod], "Escape", lazy.function(switch_to_last_group), desc="Switch to last group"),
]

# Add key bindings to switch VTs in Wayland.
# We can't check qtile.core.name in default config as it is loaded before qtile is started
# We therefore defer the check until the key binding is run by using .when(func=...)
# 添加切换虚拟终端（VT）的键绑定
# 在默认配置中无法检查 qtile.core.name，因为它在 Qtile 启动之前加载
# 因此我们使用 .when(func=...) 延迟检查，直到键绑定运行时
for vt in range(1, 8):
    keys.append(
        Key(
            ["control", "mod1"],  # 组合键为 Ctrl + Alt
            f"f{vt}",  # 功能键 F1 到 F7
            lazy.core.change_vt(vt).when(func=lambda: qtile.core.name == "wayland"),
            desc=f"Switch to VT{vt}",  # 描述为切换到 VT
        )
    )

# 定义工作组
groups = [Group(i) for i in "123456789abdef"]

for i in groups:
    keys.extend(
        [
            # mod + group number = switch to group
            # mod + 工作组编号 = 切换到工作组
            Key(
                [mod],
                i.name,  # 工作组名称
                lazy.group[i.name].toscreen(),  # 切换到指定的工作组
                desc="Switch to group {}".format(i.name),  # 描述为切换到工作组
            ),
            # mod + shift + group number = switch to & move focused window to group
            # mod + shift + 工作组编号 = 切换到并将焦点窗口移动到工作组
            Key(
                [mod, "shift"],
                i.name,  # 工作组名称
                lazy.window.togroup(i.name, switch_group=True),  # 切换到并移动窗口
                desc="Switch to & move focused window to group {}".format(i.name),  # 描述为切换并移动窗口到工作组
            ),
            # 如果你不希望切换到该工作组，可以使用下面的配置。
            # # mod + shift + 工作组编号 = 将焦点窗口移动到工作组
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="移动窗口到工作组 {}".format(i.name)),
            # Or, use below if you prefer not to switch to that group.
            # # mod + shift + group number = move focused window to group
            # Key([mod, "shift"], i.name, lazy.window.togroup(i.name),
            #     desc="move focused window to group {}".format(i.name)),
        ]
    )

# 定义布局
layouts = [
    layout.Columns(border_focus_stack=["#d75f5f", "#8f3d3d"], border_width=4),  # 列布局，设置边框颜色和宽度
    layout.Max(),  # 最大化布局
    # Try more layouts by unleashing below layouts.
    # 尝试更多布局，取消注释以下布局来启用
    # layout.Stack(num_stacks=2),  # 堆栈布局，两个堆栈
    # layout.Bsp(),  # 二叉空间分割布局
    # layout.Matrix(),   # 矩阵布局
    # layout.MonadTall(),  # 单子高布局
    # layout.MonadWide(),  # 单子宽布局
    # layout.RatioTile(),  # 比例平铺布局
    # layout.Tile(),  # 平铺布局
    # layout.TreeTab(),  # 树形标签布局
    # layout.VerticalTile(),  # 垂直平铺布局
    # layout.Zoomy(),  # 缩放布局
]

widget_defaults = dict(
    font="sans",
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        # bottom=bar.Bar(
        #     [
        #         widget.CurrentLayout(),  # 显示当前布局
        #         widget.GroupBox(),  # 显示工作组
        #         widget.Prompt(),  # 提示输入
        #         widget.WindowName(),  # 显示窗口名称
        #         widget.Chord(
        #             chords_colors={
        #                 "launch": ("#ff0000", "#ffffff"),  # 设置快捷键模式颜色，前景色为白色，背景色为红色
        #             },
        #             name_transform=lambda name: name.upper(),  # 快捷键名称转换为大写
        #         ),
        #         widget.TextBox("default config", name="default"),  # 显示默认配置文本框
        #         widget.TextBox("Press <M-r> to spawn", foreground="#d75f5f"),  # 显示提示信息文本框，颜色为红色
        #         # 注意：系统托盘（Systray）与 Wayland 不兼容，考虑使用 StatusNotifier 代替
        #         # widget.StatusNotifier(),
        #         widget.Systray(),  # 系统托盘
        #         widget.Clock(format="%Y-%m-%d %a %I:%M %p"),  # 显示时钟，格式为“年-月-日 星期 时:分 上午/下午”
        #         widget.QuickExit(),  # 快速退出按钮
        #     ],
        #     24,  # 设置面板高度为 24 像素
        #     border_width=[2, 0, 2, 0],  # 绘制顶部和底部边框，边框宽度为 2 像素
        #     border_color=["ff00ff", "000000", "ff00ff", "000000"]  # 边框颜色为洋红色和黑色
        # )
        # # You can uncomment this variable if you see that on X11 floating resize/moving is laggy
        # # By default we handle these events delayed to already improve performance, however your system might still be struggling
        # # This variable is set to None (no cap) by default, but you can set it to 60 to indicate that you limit it to 60 events per second
        # # 每秒60个事件
        # # x11_drag_polling_rate = 60,
    ),
]

# Drag floating layouts.
# 拖动浮动布局的窗口
mouse = [
    # 使用 mod 键（通常是超级键或 Windows 键）加上鼠标左键（Button1）拖动窗口以设置浮动窗口的位置
    Drag([mod], "Button1",  # 修饰键和鼠标左键
         lazy.window.set_position_floating(),  # 设置窗口浮动位置
         start=lazy.window.get_position()),  # 获取窗口初始位置
    # 使用 mod 键加上鼠标右键（Button3）拖动窗口以设置浮动窗口的大小
    Drag([mod], "Button3",  # 修饰键和鼠标右键
         lazy.window.set_size_floating(),  # 设置窗口浮动大小
         start=lazy.window.get_size()),  # 获取窗口初始大小
    # 使用 mod 键加上鼠标中键（Button2）点击窗口将其置于最前
    Click([mod], "Button2",  # 修饰键和鼠标中键
          lazy.window.bring_to_front()),  # 将窗口置于最前
]

dgroups_key_binder = None  # 不使用动态工作组的键绑定
dgroups_app_rules = []  # 动态工作组应用规则，默认为空列表
follow_mouse_focus = True  # 当鼠标移动到窗口上时，窗口获得焦点
bring_front_click = False  # 点击窗口不会将其置于最前
floats_kept_above = True  # 保持浮动窗口在非浮动窗口之上
cursor_warp = False  # 当切换焦点时，不自动将光标移动到新焦点窗口
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        # 使用 `xprop` 工具查看 X 客户端的 wm class 和 name。
        *layout.Floating.default_float_rules,  # 加载默认的浮动规则
        Match(wm_class="confirmreset"),  # gitk：确认重置窗口
        Match(wm_class="makebranch"),  # gitk：创建分支窗口
        Match(wm_class="maketag"),  # gitk：创建标签窗口
        Match(wm_class="ssh-askpass"),  # ssh-askpass：SSH 密码输入窗口
        Match(title="branchdialog"),  # gitk：分支对话框
        Match(title="pinentry"),  # GPG 密钥密码输入窗口
    ]
)
auto_fullscreen = True  # 自动将应用程序全屏显示
focus_on_window_activation = "smart"  # 智能窗口激活焦点策略
reconfigure_screens = True  # 重新配置屏幕设置

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True  # 自动最小化

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None  # Wayland 输入设备规则，默认不配置

# xcursor theme (string or None) and size (integer) for Wayland backend
wl_xcursor_theme = None  # Wayland 光标主题
wl_xcursor_size = 24  # Wayland 光标大小，单位为像素

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"  # 设置窗口管理器名称为 "LG3D"，以解决某些 Java 应用程序的问题
